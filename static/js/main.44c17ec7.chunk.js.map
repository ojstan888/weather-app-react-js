{"version":3,"sources":["components/info.js","components/form.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Info","Form","props","onSubmit","weatherMethod","type","name","placeholder","className","Weather","city","country","temp","pressure","sunset","error","API_KEY","App","state","undefined","gettingWeather","e","a","preventDefault","target","elements","value","fetch","api_url","json","data","sys","date","Date","setTime","sunset_date","getHours","getMinutes","getSeconds","setState","main","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"4SASeA,EAPF,kBACD,6BACI,6IACA,4LCGDC,EANF,SAAAC,GAAK,OACd,0BAAMC,SAAUD,EAAME,eAClB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,8EAC3C,4BAAQC,UAAU,UAAlB,+ECYOC,EAfC,SAAAP,GAAK,OACjB,6BACOA,EAAMQ,KACH,yBAAKF,UAAU,aACb,uBAAGA,UAAU,gBAAb,yFAA4C,8BAAON,EAAMQ,KAAb,KAAqBR,EAAMS,UACvE,uBAAGH,UAAU,gBAAb,uEAAyC,8BAAON,EAAMU,OACtD,uBAAGJ,UAAU,gBAAb,qDAAsC,8BAAON,EAAMW,WACnD,uBAAGL,UAAU,gBAAb,wEAA0C,8BAAON,EAAMY,UAEzD,KAEF,uBAAGN,UAAU,SAASN,EAAMa,SCRlCC,EAAU,mCAoFDC,E,2MAjFbC,MAAQ,CACNN,UAAMO,EACNT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,YAAQK,EACRJ,WAAOI,G,EAGTC,e,uCAAiB,WAAOC,GAAP,yBAAAC,EAAA,6DACfD,EAAEE,iBACEb,EAAOW,EAAEG,OAAOC,SAASf,KAAKgB,MAFnB,kBAISC,MAAM,qDAAD,OAAsDjB,EAAtD,kBAAoEM,EAApE,kBAJd,cAIPY,EAJO,gBAKMA,EAAQC,OALd,OAKPC,EALO,OAOVpB,GACGI,EAASgB,EAAKC,IAAIjB,QAClBkB,EAAO,IAAIC,MACVC,QAAQpB,GACTqB,EAAcH,EAAKI,WAAa,IAAMJ,EAAKK,aAAe,IAAML,EAAKM,aAEzE,EAAKC,SAAS,CACZ3B,KAAMkB,EAAKU,KAAK5B,KAChBF,KAAMoB,EAAKxB,KACXK,QAASmB,EAAKC,IAAIpB,QAClBE,SAAUiB,EAAKU,KAAK3B,SACpBC,OAAQqB,EACRpB,WAAOI,KAGT,EAAKoB,SAAS,CACZ3B,UAAMO,EACNT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,YAAQK,EACRJ,MAAO,sIA5BE,kDAgCb,EAAKwB,SAAS,CACZ3B,UAAMO,EACJT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,YAAQK,EACVJ,MAAO,6PAtCI,0D,8HA6Cf,OACE,yBAAKP,UAAU,WACb,yBAAKA,UAAU,QACT,yBAAKA,UAAU,OACb,yBAAKA,UAAU,QACf,kBAAC,EAAD,OAEA,yBAAKA,UAAU,QACf,kBAAC,EAAD,CACEJ,cAAeqC,KAAKrB,iBAGtB,kBAAC,EAAD,CACER,KAAM6B,KAAKvB,MAAMN,KACjBF,KAAM+B,KAAKvB,MAAMR,KACjBC,QAAS8B,KAAKvB,MAAMP,QACpBE,SAAU4B,KAAKvB,MAAML,SACrBC,OAAQ2B,KAAKvB,MAAMJ,OACnBC,MAAO0B,KAAKvB,MAAMH,gB,GA1ElB2B,IAAMC,W,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5C,GACL6C,QAAQ7C,MAAMA,EAAM8C,c","file":"static/js/main.44c17ec7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Info = () => (\r\n            <div>\r\n                <h2>Погодное приложение</h2>\r\n                <p>Узнайте погоду в вашем городе!</p>\r\n            </div>\r\n)\r\n\r\nexport default Info; ","import React from \"react\";\r\n\r\nconst Form = props => (\r\n    <form onSubmit={props.weatherMethod}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"введите город\"/>\r\n        <button className=\"button\">Узнать погоду</button>\r\n    </form>\r\n)\r\nexport default Form; \r\n\r\n","import React from \"react\";\r\n\r\nconst Weather = props => (\r\n    <div>\r\n         { props.city \r\n            ? <div className=\"infoWeath\">\r\n                <p className=\"infoWeath__b\">Местоположение: <span>{props.city}, {props.country}</span></p>\r\n                <p className=\"infoWeath__b\">Температура: <span>{props.temp}</span></p>\r\n                <p className=\"infoWeath__b\">Давление: <span>{props.pressure}</span></p>\r\n                <p className=\"infoWeath__b\">Закат солнца: <span>{props.sunset}</span></p>\r\n            </div>\r\n            : null\r\n            }\r\n            <p className=\"error\">{props.error}</p>\r\n        </div>\r\n)\r\n\r\nexport default Weather; ","import React from 'react';\nimport Info from './components/info';\nimport Form from './components/form';\nimport Weather from './components/weather';\n\nconst API_KEY = \"3976851ba0b3d3485166e96cf60ef05f\";\nclass App extends React.Component {\n\n  state = {\n    temp: undefined,\n    city: undefined,\n    country: undefined,\n    pressure: undefined,\n    sunset: undefined,\n    error: undefined,\n  }\n\n  gettingWeather = async (e) => {\n    e.preventDefault();\n    var city = e.target.elements.city.value;\n    try {\n      const api_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n      const data = await api_url.json();\n\n      if(city) {\n        var sunset = data.sys.sunset;\n        var date = new Date();\n        date.setTime(sunset);\n        var sunset_date = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\n  \n        this.setState({\n          temp: data.main.temp,\n          city: data.name,\n          country: data.sys.country,\n          pressure: data.main.pressure,\n          sunset: sunset_date,\n          error: undefined\n        });\n      } else {\n        this.setState({\n          temp: undefined,\n          city: undefined,\n          country: undefined,\n          pressure: undefined,\n          sunset: undefined,\n          error: \"Введите название города!\"\n        });\n      }\n    } catch (e) {\n      this.setState({\n        temp: undefined,\n          city: undefined,\n          country: undefined,\n          pressure: undefined,\n          sunset: undefined,\n        error: 'Такого города не существует. Попробуйте еще раз!'\n      })\n    }\n    \n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"main\">\n              <div className=\"row\">\n                <div className=\"info\">\n                <Info/>\n                </div>\n                <div className=\"form\">\n                <Form \n                  weatherMethod={this.gettingWeather}\n                />\n\n                <Weather \n                  temp={this.state.temp}\n                  city={this.state.city}\n                  country={this.state.country}\n                  pressure={this.state.pressure}\n                  sunset={this.state.sunset}\n                  error={this.state.error} \n                />\n                </div>\n              </div>\n            </div>\n        </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}